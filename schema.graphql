type AuthData {
  userId: ID
  token: String!
}

type User {
  id: ID
  name: String!
  surname: String!
  mobileNumber: String
  email: String!
  password: String
  createdDevices: [Device!]
}

type Device {
  id: ID
  dateOfCreate: String
  deviceName: String!
  deviceType: String!
  isActive: Boolean!
  allDeviceLogs: [DeviceLog]
  currentWeekLogs: [DeviceLog]
  creator: [User!]
}

type DevicesChartBarReport {
  dateOfCreate: String
  totalDevicesCreated: Int
}

type DevicesResponse {
  devices: [Device]
  page_size: Int
  page_number: Int
  total_count: Int
  active_count: Int
}

type DevicesResponseReport {
  chart_line: [Device]
  chart_bar: [DevicesChartBarReport]
  total_count: Int
  active_count: Int
  table: [Device]
}

type Log {
  id: ID
  deviceId: String
  deviceLogs: [DeviceLog]
}

type DeviceLog {
  date: String
  totalIssuesCount: Int
  issues: [Issue]
}

type Issue {
  name: String
  count: Int
}

type Type {
  id: ID
  name: String
}

type Query {
  login(email: String!, password: String!): AuthData
  getAllDevices(
    offset: Int
    limit: Int
    sortByName: Boolean
    isSortDescending: Boolean
    filterByName: String
    filterByType: [String]
    filterByStatus: [String]
  ): DevicesResponse
  getReport(
    sortByName: Boolean
    isSortDescending: Boolean
    filterByName: String
    filterByType: [String]
    filterByStatus: [String]
    filterByDateStart: String
    filterByDateEnd: String
  ): DevicesResponseReport
  getDevice(id: ID): Device
  getAllLogs: [Log]
  getDeviceLogs(id: ID): Log
  getAllDeviceTypes: [Type]
}

type Mutation {
  signUp(
    name: String!
    surname: String!
    mobileNumber: String
    email: String!
    password: String!
  ): User
  createDevice(
    deviceName: String!
    deviceType: String!
    isActive: Boolean!
  ): Device
  editDevice(
    id: ID
    deviceName: String!
    deviceType: String!
    isActive: Boolean!
  ): Device
  deleteDevice(id: ID): Device
}
